"""
Django settings for api_core project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY') # noqa501


# HOSTS
ALLOWED_HOSTS = ['*']


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    'rest_framework',
    'drf_yasg',
    "drf_spectacular",
    'rest_framework.authtoken',
    'corsheaders',
    'django_summernote',
    'django_select2',
    "channels",
    'django_celery_beat',
    'django_celery_results',
    'django_elasticsearch_dsl',
    'apps.users.apps.UsersConfig',
    'apps.book.apps.BookConfig',
    'apps.ecommerce.apps.EcommerceConfig',
    'apps.report.apps.ReportConfig',
    'apps.course.apps.CourseConfig',
    'apps.permissions.apps.PermissionsConfig',
    'apps.chat.apps.ChatConfig',
    'apps.notifications.apps.NotificationsConfig',
    'apps.auditlog.apps.AuditlogConfig',
    'apps.tenants.apps.TenantsConfig',
    'apps.throttle.apps.ThrottleConfig',
    'apps.presence.apps.PresenceConfig',
    'apps.dashboard.apps.DashboardConfig',
    'apps.mailer.apps.MailerConfig',
    'apps.image_processing.apps.ImageProcessingConfig',
    'apps.scheduler.apps.SchedulerConfig',
    'apps.monitor.apps.MonitorConfig',
    'apps.search.apps.SearchConfig',
    'apps.kafka_events.apps.KafkaEventsConfig',
    'apps.knowledge.apps.KnowledgeConfig',
    'apps.analytics.apps.AnalyticsConfig',
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    'apps.throttle.middleware.QuotaMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    "apps.tenants.middleware.TenantMiddleware",
    'common.middleware.secure_headers.SecureHeadersMiddleware',
    "common.middleware.correlation.CorrelationIDMiddleware",
    "common.middleware.logging.RequestLoggingMiddleware"
]


AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend'] # noqa501


ASGI_APPLICATION = "api_core.asgi.application"

# CORS
CORS_ALLOW_ALL_ORIGINS = True  # False
CORS_ALLOW_HEADERS = ['*']
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOWED_ORIGINS = [os.getenv('ALLOWED_HOSTS')]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://meusite.com",
    "http://127.0.0.1:8000",
]
CORS_ORIGIN_WHITELIST = [os.getenv('ALLOWED_HOSTS')]
CSRF_TRUSTED_ORIGINS = ['https://*.emannar.com', 'http://*.127.0.0.1']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True  # is_not_localhost()
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # is_not_localhost()
SECURE_SSL_REDIRECT = False  # is_not_localhost()

# REDIS
REDIS_HOST = os.getenv("REDIS_HOST", "127.0.0.1")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", "")

if REDIS_PASSWORD:
    redis_url = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}"
else:
    redis_url = f"redis://{REDIS_HOST}:{REDIS_PORT}"

# ELASTICSEARCH
ELASTICSEARCH_HOST = os.getenv("ELASTICSEARCH_HOST")
ELASTICSEARCH_USERNAME = os.getenv("ELASTICSEARCH_USERNAME")
ELASTICSEARCH_PASSWORD = os.getenv("ELASTICSEARCH_PASSWORD")

# KAFKA
KAFKA_BROKER_URL = os.getenv("KAFKA_BROKER_URL")
KAFKA_COURSE_TOPIC = os.getenv("KAFKA_COURSE_TOPIC")
KAFKA_BOOK_TOPIC = os.getenv("KAFKA_BOOK_TOPIC")

# MONGO
MONGO_URI = os.getenv("MONGO_URI")

# CELERY
CELERY_BROKER_URL = f"{redis_url}/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_RESULT_EXTENDED = True
# CELERY_RESULT_BACKEND = 'django-db'

IS_TESTING = 'test' in sys.argv

CELERY_TASK_ALWAYS_EAGER = IS_TESTING
CELERY_TASK_EAGER_PROPAGATES = IS_TESTING

if IS_TESTING:
    CELERY_RESULT_BACKEND = None
else:
    CELERY_RESULT_BACKEND = 'django-db'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{redis_url}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# URLCONF
ROOT_URLCONF = "api_core.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

WSGI_APPLICATION = "api_core.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator", # noqa501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", # noqa501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", # noqa501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", # noqa501
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = "pt-br"

USE_TZ = True
TIME_ZONE = 'UTC'
# TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TOKEN_EXPIRED_AFTER_SECONDS = 60 * 60 * 24 * 7

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
]

# S3
AWS_BUCKET = os.getenv('AWS_BUCKET')
AWS_S3_LINK = os.getenv('AWS_S3_LINK')
AWS_ACCESS_KEY = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

# SEND EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
EMAIL_USE_TLS = True

# GATEWAY
GATEWAY_URL = os.getenv('GATEWAY_URL')
GATEWAY_API_KEY = os.getenv('GATEWAY_API_KEY')

# OPENAI
OPENAI_KEY = os.getenv('OPENAI_KEY')

# CRON
TOKEN_CRON = os.getenv('TOKEN_CRON')

if ELASTICSEARCH_USERNAME and ELASTICSEARCH_PASSWORD:
    host_with_auth = ELASTICSEARCH_HOST.replace("://", f"://{ELASTICSEARCH_USERNAME}:{ELASTICSEARCH_PASSWORD}@") # noqa501
else:
    host_with_auth = ELASTICSEARCH_HOST

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': host_with_auth
    }
}

# SWAGGER
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "api_key": {"type": "apiKey", "name": "Authorization", "in": "header"}, # noqa501
    },
}

# REST FRAMEWORK CONFIG
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.TokenAuthentication',
        'apps.users.api.auth.authentication.ExpiringTokenAuthentication', # noqa501
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', # noqa E501
    'PAGE_SIZE': 10,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        # 'rest_framework.throttling.UserRateThrottle',
        'apps.throttle.throttling.CustomUserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '25/minute',
        'user': '100/minute'  # usado como fallback
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

PROJECT_ENV = os.getenv("PROJECT_ENV")
PROJECT_NAME = os.getenv('PROJECT_NAME')
PROJECT_EMAIL = os.getenv('PROJECT_EMAIL')
PROJECT_IMAGE = os.getenv('PROJECT_IMAGE')
PROJECT_URL = os.getenv('PROJECT_URL')

# SECURITY WARNING: don't run with debug turned on in production!
if PROJECT_ENV == "local":
    DEBUG = True
    URL_BASE = "0.0.0.0:8000"
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATIC_URL = "/static/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"

elif PROJECT_ENV == "develop_local":
    DEBUG = True
    URL_BASE = "0.0.0.0:8000"
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT"),
        }
    }
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATIC_URL = "/static/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"
else:
    DEBUG = False
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT"),
        }
    }

    # CloudFront settings
    CLOUDFRONT_DOMAIN = os.getenv('CDN_DOMAIN_PROD')

    # AWS S3 settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('BUCKET_STATIC_FILES')
    AWS_S3_REGION_NAME = 'us-east-1'
    AWS_S3_CUSTOM_DOMAIN = CLOUDFRONT_DOMAIN

    # Static files settings
    STATIC_URL = f'https://{CLOUDFRONT_DOMAIN}/static/'
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # noqa501
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_LOCATION = "static"


print("### ENV: ", PROJECT_ENV)
